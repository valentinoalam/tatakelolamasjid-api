// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// generator custom_generator {
//     provider = "prisma-generator-fake-data"
//     output   = "./types/fake-data.ts"
// }

// generator markdown {
//   provider = "prisma-markdown"
//   output   = "./ERD.md"
//   title    = "Mosque Management"
// }

// generator nestgraphql {
//     provider = "node node_modules/prisma-nestjs-graphql"
//     // for yarn monorepos
//     // provider = "prisma-nestjs-graphql"
//     output = "../src/@generated"
// }

// generator typegraphql {
//   provider           = "typegraphql-prisma"
//   output             = "../prisma/generated/type-graphql"
//   emitTranspiledCode = true
// }

// generator nestjsDto {
//   provider                        = "prisma-generator-nestjs-dto"
//   output                          = "../src/generated/nestjs-dto"
//   outputToNestJsResourceStructure = "false"
//   exportRelationModifierClasses   = "true"
//   reExport                        = "false"
//   createDtoPrefix                 = "Create"
//   updateDtoPrefix                 = "Update"
//   dtoSuffix                       = "Dto"
//   entityPrefix                    = ""
//   entitySuffix                    = ""
//   fileNamingStyle                 = "camel"
// }

// generator zod {
//   provider                 = "zod-prisma"
//   output                   = "./zod" // (default) the directory where generated zod schemas will be saved

//   relationModel            = true // (default) Create and export both plain and related models.
//   // relationModel         = "default" // Do not export model without relations.
//   // relationModel         = false // Do not generate related model

//   modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
//   // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

//   modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

//   // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
//   useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

//   imports                  = null // (default) will import the referenced file in generated schemas to be used via imports.someExportedVariable

//   // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
//   prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
//   // prismaJsonNullability = false // allows null assignment to optional JSON fields
// }

generator erd {
  provider = "prisma-erd-generator"
   theme = "forest"   //default (default), forest, dark, neutral
   disabled = false
   includeRelationFromFields = true
}

// generator docs {
//   provider = "node node_modules/prisma-docs-generator"
//   output = "../docs"
// }

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notification {
  id              String             @id @default(uuid()) @db.Char(36)
  sender          String?
  title           String
  message         String
  photoUrl        String?
  dtCreated       DateTime           @default(now())
  isReaded        Boolean            @default(false)
  receiver        UserNotification[]
  sentAt          DateTime
  status          NotificationStatus 
  @@map("notification")
}

enum NotificationStatus {
  Pending
  Sent
  Failed
  Delivered
}

enum Role {
  Admin
  Petugas
  Member
}

model UserNotification {
  id                String  @id @default(uuid()) @db.Char(36)
  userId          String @map("user_id") @db.Char(36)
  notification_id String @map("notif_id") @db.Char(36)

  user  User         @relation(fields: [userId], references: [id])
  notif Notification @relation(fields: [notification_id], references: [id])

  @@unique([userId, notification_id])
}

model User {
  id                String  @id @default(uuid()) @db.Char(36)
  emailAddress      String
  username          String
  hashedPassword    String
  api_token         String?
  isConfirmed       String
  createdAt         DateTime  @default(now()) @map("date_created")
  updatedAt         DateTime? @updatedAt @map("date_modified")
  role              Role
  notification      UserNotification[]
  paymentMethod     PaymentMethod[]
  memo              Memo[]
  profile           Profile?
  position          Position?
  // role              Role
  // event             Event[]
  // mudhohi           Mudhohi[]
  // zakatFitrah       ZakatFitrah[]
  // zakatMal          ZakatMal[]
  // participated      Participant[]

  Participant Participant[]
}

model Position {
  id                  String  @id @default(uuid()) @db.Char(36)
  userId              String  @db.Char(36) @unique
  eventId             String?
  name                String
  periode             String

  createdAt           DateTime  @default(now()) @map("date_created")
  updatedAt           DateTime? @updatedAt @map("date_modified")
  user                User      @relation(fields: [userId], references: [id])
  event               Event?      @relation(fields: [eventId], references: [id])
}

model FamilyMember {
  id            String  @id @default(uuid()) @db.Char(36)
  participantId String  @db.Char(36)
  name          String
  information   String
  relationType  String
  guardian      Participant @relation(fields: [participantId], references: [userId])
}

model Participant {
  id                String  @id @default(uuid()) @db.Char(36)
  userId            String @map("user_id") @db.Char(36) @unique
  eventId           String @map("event_id") @db.Char(36)
  profileId         String  @db.Char(36)
  emergencyId       String  @db.Char(36)
  withFamily        Boolean
  createdAt         DateTime  @default(now()) @map("date_created")
  updatedAt         DateTime? @updatedAt @map("date_modified")
  profile           Profile   @relation(fields: [profileId], references: [id])
  emergencyContact  EmergencyContact   @relation(fields: [emergencyId], references: [id])
  user              User      @relation(fields: [userId], references: [id])
  event             Event     @relation(fields: [eventId], references: [id])
  member            FamilyMember[]
  @@unique([userId, eventId])
}

model EmergencyContact {
  id            String  @id @default(uuid()) @db.Char(36)
  name          String
  phone         String
  relationType  String
  createdAt     DateTime  @default(now()) @map("date_created")
  updatedAt     DateTime? @updatedAt @map("date_modified")

  Participant   Participant[]
}

model Ustadz {
  id            String  @id @default(uuid()) @db.Char(36)
  name          String
  phone         String
  address       String
  attendAs      UstadzEvent[]
}
model UstadzEvent  {
  id        String  @id @default(uuid()) @db.Char(36)
  ustadzId  String
  eventId   String
  
  Ustadz    Ustadz   @relation(fields: [ustadzId], references: [id])
  Event     Event   @relation(fields: [eventId], references: [id])
  
  @@unique([ustadzId, eventId])
}
model Event {
  id            String  @id @default(uuid()) @db.Char(36)
  name          String
  place         String
  dtStart       DateTime
  dtEnd         DateTime
  quota         Int
  description   String
  heldPeriod    Period
  createdAt     DateTime  @default(now()) @map("date_created")
  updatedAt     DateTime? @updatedAt @map("date_modified")
  createdBy     String
  participant   Participant[]
  crews         Position[]
  speakers      UstadzEvent[]
}

model Profile {
  id                  String  @id @default(uuid()) @db.Char(36)
  userId              String  @db.Char(36) @unique
  dtBirth             DateTime
  isMan               Boolean
  address             String
  domisili            String?
  fullname            String
  phone               String
  createdAt           DateTime  @default(now()) @map("date_created")
  updatedAt           DateTime? @updatedAt @map("date_modified")
  user                User      @relation(fields: [userId], references: [id])

  Participant Participant[]
}

model PaymentMethod {
  id               String  @id @default(uuid()) @db.Char(36)
  userId           String  @db.Char(36)
  jenis_pembayaran String
  createdAt        DateTime  @default(now()) @map("date_created")
  updatedAt        DateTime? @updatedAt @map("date_modified")
  user             User       @relation(fields: [userId], references: [id])
  Transaction      Transaction[]
}

model AccountCategory {
  id          String  @id @default(uuid()) @db.Char(36)
  name        String
  description String
  createdAt  DateTime  @default(now()) @map("date_created")
  updatedAt  DateTime? @updatedAt @map("date_modified")

  Account Account[]
}

enum AccountType {
  Asset
  Liability
  Equity
  Income
  Expense
}

enum TransactionType {
  DEBIT
  CREDIT
}

model BankAccount {
  id            String  @id @default(uuid()) @db.Char(36)
  bankName      String
  accountNumber String
  onBehalfOf    String
  description   String
  createdAt     DateTime @default(now()) @map("date_created")
  updatedAt     DateTime? @updatedAt @map("date_modified")

  Account Account[]
}

model Account {
  id                  String  @id @default(uuid()) @db.Char(36)
  bankAccId           String  @db.Char(36)
  categoryId          String  @db.Char(36)
  parentAccountId     String? // For hierarchical accounts
  name                String
  type                AccountType // Enum: CASH, BANK, etc.
  description         String
  balance             Int // Calculated field
  bankAcc             BankAccount?       @relation(fields: [bankAccId], references: [id])
  createdAt           DateTime  @default(now()) @map("date_created")
  updatedAt           DateTime? @updatedAt @map("date_modified")
  category            AccountCategory  @relation(fields: [categoryId], references: [id])
  parent              Account?  @relation("ParentAccount", fields: [parentAccountId], references: [id])
  children            Account[] @relation("ParentAccount")
  Transaction         Transaction[]
  TrialBalanceDetail  TrialBalanceDetail[]
}

model Transaction {
  id                String  @id @default(uuid()) @db.Char(36)
  accountId         String  @db.Char(36)
  vendorId          String  @db.Char(36)
  paymentMethodId   String  @db.Char(36)
  type              TransactionType
  amount            Int
  description       String
  reference         String
  dtTrx             DateTime
  notaUrl           String
  account           Account  @relation(fields: [accountId], references: [id])
  vendor            Vendor          @relation(fields: [vendorId], references: [id])
  paymentMethod     PaymentMethod @relation(fields: [paymentMethodId], references: [id])
  createdAt         DateTime @default(now()) @map("date_created")
  updatedAt         DateTime? @updatedAt @map("date_modified")
  createdBy         String
  updatedBy         String
}

model TrialBalance {
  id          String  @id @default(uuid()) @db.Char(36)
  ledgerId    String  @db.Char(36)
  periodStart DateTime
  periodEnd   DateTime
  totalDebit  Int
  totalCredit Int
  createdAt   DateTime @default(now()) @map("date_created")
  updatedAt   DateTime? @updatedAt @map("date_modified")
  
  ledger      Ledger  @relation(fields: [ledgerId], references: [id])
  TrialBalanceDetail TrialBalanceDetail[]
}

model TrialBalanceDetail {
  id              String  @id @default(uuid()) @db.Char(36)
  trialBalanceId  String  @db.Char(36)
  accountId       String  @db.Char(36)
  isDebit         Boolean @default(true)
  openingBalance  Int
  closingBalance  Int
  account         Account  @relation(fields: [accountId], references: [id])
  trialBalance    TrialBalance  @relation(fields: [trialBalanceId], references: [id])
  createdAt       DateTime @default(now()) @map("date_created")
  updatedAt       DateTime? @updatedAt @map("date_modified")
}

model Ledger {
  id          String  @id @default(uuid()) @db.Char(36)
  name        String
  description String

  createdAt   DateTime @default(now()) @map("date_created")
  updatedAt   DateTime? @updatedAt @map("date_modified")

  reportPeriod Period // Enum: DAILY, WEEKLY, MONTHLY, QUARTERLY, YEARLY
  startWeekDay WeekDay // Enum: MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY, SUNDAY
  TrialBalance TrialBalance[]
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}
enum Period {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  YEARLY
}

model Vendor {
  id            String  @id @default(uuid()) @db.Char(36)
  name          String
  phone         String
  address       String
  businessField String    @map("jenis_usaha")
  note          String
  createdAt     DateTime  @default(now()) @map("date_created")
  updatedAt     DateTime? @updatedAt @map("date_modified")
  transaction   Transaction[]
}

model Memo {
  id          String    @id @default(uuid()) @db.Char(36)
  userId      String    @db.Char(36)
  title       String    @map("judul")
  body        String    @map("isi_memo")
  is_done     Boolean   @map("selesai")
  createdAt   DateTime  @default(now()) @map("date_created")
  updatedAt   DateTime? @updatedAt @map("date_modified")
  user        User      @relation(fields: [userId], references: [id])
}

enum AcquisitionOrigin {
  Donation
  Purchase
  Inheritance
  Bequest
  MosqueBuildingFund
  Lease
  Rental
  Pledges
  InvestmentReturns
  FundraisingEvents
  Grants
  Other
}

enum AssetTypes {
    Fixed
    NonFixed
    Current
    NonCurrent
}
model Asset {
  id                String  @id @default(uuid()) @db.Char(36)
  name              String  @map("nama_aset")
  description       String    @map("deskripsi")

  date_acquired     DateTime
  economicLife      Int       @map("umur_ekonomis")
  qty               Int       @map("kuantitas")
   
  createdAt         DateTime  @default(now()) @map("date_created")
  updatedAt         DateTime? @updatedAt      @map("date_modified")
  createdBy         String
  editedBy          String

  type              AssetTypes        @map("jenis_aset")
  origin            AcquisitionOrigin @map("asal_perolehan")
  AssetStatus       AssetStatus[]


  AssetTags AssetTags[]
}

model AssetStatus {
  id            String  @id @default(uuid()) @db.Char(36)
  assetId       String  @db.Char(36)

  availableQty  Int
  totalQty      Int
  note          String

  updatedBy     String  @db.Char(36)
  updatedAt     DateTime? @updatedAt      @map("date_modified")

  asset       Asset     @relation(fields: [assetId], references: [id])
}

model Tag {
  id            String  @id @default(uuid()) @db.Char(36)
  name          String
  description   String
  createdAt     DateTime  @default(now()) @map("date_created")
  updatedAt     DateTime? @updatedAt @map("date_modified")

  AssetTags AssetTags[]
}

model AssetTags {
  id            String  @id @default(uuid()) @db.Char(36)
  assetId       String @map("aset_id") @db.Char(36)
  tagId         String @map("tag_id") @db.Char(36)

  asset         Asset         @relation(fields: [assetId], references: [id])
  tag           Tag           @relation(fields: [tagId], references: [id])

  @@unique([assetId, tagId])
}

model Media {
  id        String  @id @default(uuid()) @db.Char(36)
  img       Image[] 
}

model Image {
  id        String  @id @default(uuid()) @db.Char(36)
  mediaId   String?
  caption   String
  url       String
  createdAt DateTime  @default(now()) @map("date_created")
  updatedAt DateTime? @updatedAt      @map("date_modified")

  container        Media?         @relation(fields: [mediaId], references: [id])
}
